// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemister {
  id         String     @id @default(uuid())
  year       Int
  title      String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Students   Students[]

  @@map("academic_semester")
}

model AcademicFaculty {
  id                 String               @id @default(uuid())
  title              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  AcademicDepartment AcademicDepartment[]
  students           Students[]
  faculties            Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  // have to update foreign Key
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  students          Students[]
  faculties           Faculty[]

  @@map("academic_department")
}

model Students {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodgroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // have to update foreign key
  academicSemester     AcademicSemister   @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId   String
  // have to update foreign key
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  // have to update foreign key
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodgroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  // have to update foreign key
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String

  @@map("faculties")
}
